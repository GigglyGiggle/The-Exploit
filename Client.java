package FRAT_Experimential;

import FRAT_Experimential.Processor;
import FRAT_Experimential.Configuration.Configuration;
import FRAT_Experimential.HttpAppender;
import FRAT_Experimential.Configuration.portMalware;
import FRAT_Experimential.Configuration.JSONValue;

import java.net.*;
import java.security.Key;
import java.security.MessageDigest;
import java.util.Arrays;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;

import javax.crypto.spec.SecretKeySpec;

public class Client {
	public class Configuratiion {

	}
	
	private static void setKey(String myKey) {
        try {
            byte[] key = myKey.getBytes("UTF-8");
            key = MessageDigest.getInstance("SHA-1").digest(key);
            key = Arrays.copyOf(key, 16);
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	
    public static String encrypt1(String strToEncrypt, String secret) throws Exception {
        setKey(secret);
        final Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
        Key secretKey = null;
		cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
    }

	public static void main(String[] args) throws Exception {
		DatagramSocket clientSocket = new DatagramSocket();
        InetAddress ipAddress = InetAddress.getByName("localhost");
        byte[] sendData = new byte[999999999];
        byte[] receiveData = new byte[999999999];
        String message = ".nj";
        sendData = message.getBytes();
        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, ipAddress, 35635);
        clientSocket.send(sendPacket);
        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
        clientSocket.receive(receivePacket);
        String serverResponse = new String(receivePacket.getData());
        System.out.println("Server says: " + serverResponse.trim());
        clientSocket.close();
    }

	public static String encrypt(String password, String encryptionkey) {
		// TODO Auto-generated method stub
		return null;
	}

	public static String decrypt(String trim, String encryptionkey) {
		// TODO Auto-generated method stub
		return null;
	}

	public static String ecrypt(String trim, String encryptionkey) {
		// TODO Auto-generated method stub
		return null;
	}
}

